// Code generated by protoc-gen-cobra.
// source: runtime.proto
// DO NOT EDIT!

/*
Package runtime is a generated protocol buffer package.

It is generated from these files:
	runtime.proto

It has these top-level commands:
	RuntimeClientCommand
*/

package runtime

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	tls "crypto/tls"
	x509 "crypto/x509"
	json "encoding/json"
	iocodec "github.com/fiorix/protoc-gen-cobra/iocodec"
	envconfig "github.com/kelseyhightower/envconfig"
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	context "golang.org/x/net/context"
	oauth2 "golang.org/x/oauth2"
	grpc "google.golang.org/grpc"
	credentials "google.golang.org/grpc/credentials"
	oauth "google.golang.org/grpc/credentials/oauth"
	io "io"
	ioutil "io/ioutil"
	log "log"
	net "net"
	os "os"
	filepath "path/filepath"
	template "text/template"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ cobra.Command
var _ context.Context
var _ credentials.AuthInfo
var _ envconfig.Decoder
var _ filepath.WalkFunc
var _ grpc.ClientConn
var _ io.Reader
var _ iocodec.Encoder
var _ = ioutil.Discard
var _ json.Encoder
var _ log.Logger
var _ net.IP
var _ oauth.TokenSource
var _ oauth2.Token
var _ os.File
var _ pflag.FlagSet
var _ template.Template
var _ time.Time
var _ tls.Config
var _ x509.Certificate

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

var _DefaultRuntimeClientCommandConfig = _NewRuntimeClientCommandConfig()

type _RuntimeClientCommandConfig struct {
	ServerAddr         string        `envconfig:"SERVER_ADDR" default:"localhost:8080"`
	RequestFile        string        `envconfig:"REQUEST_FILE"`
	PrintSampleRequest bool          `envconfig:"PRINT_SAMPLE_REQUEST"`
	ResponseFormat     string        `envconfig:"RESPONSE_FORMAT" default:"json"`
	Timeout            time.Duration `envconfig:"TIMEOUT" default:"10s"`
	TLS                bool          `envconfig:"TLS"`
	ServerName         string        `envconfig:"TLS_SERVER_NAME"`
	InsecureSkipVerify bool          `envconfig:"TLS_INSECURE_SKIP_VERIFY"`
	CACertFile         string        `envconfig:"TLS_CA_CERT_FILE"`
	CertFile           string        `envconfig:"TLS_CERT_FILE"`
	KeyFile            string        `envconfig:"TLS_KEY_FILE"`
	AuthToken          string        `envconfig:"AUTH_TOKEN"`
	AuthTokenType      string        `envconfig:"AUTH_TOKEN_TYPE" default:"Bearer"`
	JWTKey             string        `envconfig:"JWT_KEY"`
	JWTKeyFile         string        `envconfig:"JWT_KEY_FILE"`
}

func _NewRuntimeClientCommandConfig() *_RuntimeClientCommandConfig {
	c := &_RuntimeClientCommandConfig{}
	envconfig.Process("", c)
	return c
}

func (o *_RuntimeClientCommandConfig) AddFlags(fs *pflag.FlagSet) {
	fs.StringVarP(&o.ServerAddr, "server-addr", "s", o.ServerAddr, "server address in form of host:port")
	fs.StringVarP(&o.RequestFile, "request-file", "f", o.RequestFile, "client request file (must be json, yaml, or xml); use \"-\" for stdin + json")
	fs.BoolVarP(&o.PrintSampleRequest, "print-sample-request", "p", o.PrintSampleRequest, "print sample request file and exit")
	fs.StringVarP(&o.ResponseFormat, "response-format", "o", o.ResponseFormat, "response format (json, prettyjson, yaml, or xml)")
	fs.DurationVar(&o.Timeout, "timeout", o.Timeout, "client connection timeout")
	fs.BoolVar(&o.TLS, "tls", o.TLS, "enable tls")
	fs.StringVar(&o.ServerName, "tls-server-name", o.ServerName, "tls server name override")
	fs.BoolVar(&o.InsecureSkipVerify, "tls-insecure-skip-verify", o.InsecureSkipVerify, "INSECURE: skip tls checks")
	fs.StringVar(&o.CACertFile, "tls-ca-cert-file", o.CACertFile, "ca certificate file")
	fs.StringVar(&o.CertFile, "tls-cert-file", o.CertFile, "client certificate file")
	fs.StringVar(&o.KeyFile, "tls-key-file", o.KeyFile, "client key file")
	fs.StringVar(&o.AuthToken, "auth-token", o.AuthToken, "authorization token")
	fs.StringVar(&o.AuthTokenType, "auth-token-type", o.AuthTokenType, "authorization token type")
	fs.StringVar(&o.JWTKey, "jwt-key", o.JWTKey, "jwt key")
	fs.StringVar(&o.JWTKeyFile, "jwt-key-file", o.JWTKeyFile, "jwt key file")
}

var RuntimeClientCommand = &cobra.Command{
	Use: "runtime",
}

func _DialRuntime() (*grpc.ClientConn, RuntimeClient, error) {
	cfg := _DefaultRuntimeClientCommandConfig
	opts := []grpc.DialOption{
		grpc.WithBlock(),
		grpc.WithTimeout(cfg.Timeout),
	}
	if cfg.TLS {
		tlsConfig := &tls.Config{}
		if cfg.InsecureSkipVerify {
			tlsConfig.InsecureSkipVerify = true
		}
		if cfg.CACertFile != "" {
			cacert, err := ioutil.ReadFile(cfg.CACertFile)
			if err != nil {
				return nil, nil, fmt.Errorf("ca cert: %v", err)
			}
			certpool := x509.NewCertPool()
			certpool.AppendCertsFromPEM(cacert)
			tlsConfig.RootCAs = certpool
		}
		if cfg.CertFile != "" {
			if cfg.KeyFile == "" {
				return nil, nil, fmt.Errorf("missing key file")
			}
			pair, err := tls.LoadX509KeyPair(cfg.CertFile, cfg.KeyFile)
			if err != nil {
				return nil, nil, fmt.Errorf("cert/key: %v", err)
			}
			tlsConfig.Certificates = []tls.Certificate{pair}
		}
		if cfg.ServerName != "" {
			tlsConfig.ServerName = cfg.ServerName
		} else {
			addr, _, _ := net.SplitHostPort(cfg.ServerAddr)
			tlsConfig.ServerName = addr
		}
		//tlsConfig.BuildNameToCertificate()
		cred := credentials.NewTLS(tlsConfig)
		opts = append(opts, grpc.WithTransportCredentials(cred))
	} else {
		opts = append(opts, grpc.WithInsecure())
	}
	if cfg.AuthToken != "" {
		cred := oauth.NewOauthAccess(&oauth2.Token{
			AccessToken: cfg.AuthToken,
			TokenType:   cfg.AuthTokenType,
		})
		opts = append(opts, grpc.WithPerRPCCredentials(cred))
	}
	if cfg.JWTKey != "" {
		cred, err := oauth.NewJWTAccessFromKey([]byte(cfg.JWTKey))
		if err != nil {
			return nil, nil, fmt.Errorf("jwt key: %v", err)
		}
		opts = append(opts, grpc.WithPerRPCCredentials(cred))
	}
	if cfg.JWTKeyFile != "" {
		cred, err := oauth.NewJWTAccessFromFile(cfg.JWTKeyFile)
		if err != nil {
			return nil, nil, fmt.Errorf("jwt key file: %v", err)
		}
		opts = append(opts, grpc.WithPerRPCCredentials(cred))
	}
	conn, err := grpc.Dial(cfg.ServerAddr, opts...)
	if err != nil {
		return nil, nil, err
	}
	return conn, NewRuntimeClient(conn), nil
}

type _RuntimeRoundTripFunc func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error

func _RuntimeRoundTrip(sample interface{}, fn _RuntimeRoundTripFunc) error {
	cfg := _DefaultRuntimeClientCommandConfig
	var em iocodec.EncoderMaker
	var ok bool
	if cfg.ResponseFormat == "" {
		em = iocodec.DefaultEncoders["json"]
	} else {
		em, ok = iocodec.DefaultEncoders[cfg.ResponseFormat]
		if !ok {
			return fmt.Errorf("invalid response format: %q", cfg.ResponseFormat)
		}
	}
	if cfg.PrintSampleRequest {
		return em.NewEncoder(os.Stdout).Encode(sample)
	}
	var d iocodec.Decoder
	if cfg.RequestFile == "" || cfg.RequestFile == "-" {
		d = iocodec.DefaultDecoders["json"].NewDecoder(os.Stdin)
	} else {
		f, err := os.Open(cfg.RequestFile)
		if err != nil {
			return fmt.Errorf("request file: %v", err)
		}
		defer f.Close()
		ext := filepath.Ext(cfg.RequestFile)
		if len(ext) > 0 && ext[0] == '.' {
			ext = ext[1:]
		}
		dm, ok := iocodec.DefaultDecoders[ext]
		if !ok {
			return fmt.Errorf("invalid request file format: %q", ext)
		}
		d = dm.NewDecoder(f)
	}
	conn, client, err := _DialRuntime()
	if err != nil {
		return err
	}
	defer conn.Close()
	return fn(client, d, em.NewEncoder(os.Stdout))
}

var _RuntimeSayHelloClientCommand = &cobra.Command{
	Use:  "sayhello",
	Long: "SayHello client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	sayhello -p > req.json

Submit request using file:
	sayhello -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | sayhello --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v SayHelloRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.SayHello(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeSayHelloClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeSayHelloClientCommand.Flags())
}

var _RuntimeInvokeServiceClientCommand = &cobra.Command{
	Use:  "invokeservice",
	Long: "InvokeService client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	invokeservice -p > req.json

Submit request using file:
	invokeservice -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | invokeservice --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v InvokeServiceRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.InvokeService(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeInvokeServiceClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeInvokeServiceClientCommand.Flags())
}

var _RuntimeGetConfigurationClientCommand = &cobra.Command{
	Use:  "getconfiguration",
	Long: "GetConfiguration client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getconfiguration -p > req.json

Submit request using file:
	getconfiguration -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getconfiguration --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetConfigurationRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.GetConfiguration(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetConfigurationClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetConfigurationClientCommand.Flags())
}

var _RuntimeSaveConfigurationClientCommand = &cobra.Command{
	Use:  "saveconfiguration",
	Long: "SaveConfiguration client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	saveconfiguration -p > req.json

Submit request using file:
	saveconfiguration -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | saveconfiguration --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v SaveConfigurationRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.SaveConfiguration(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeSaveConfigurationClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeSaveConfigurationClientCommand.Flags())
}

var _RuntimeDeleteConfigurationClientCommand = &cobra.Command{
	Use:  "deleteconfiguration",
	Long: "DeleteConfiguration client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	deleteconfiguration -p > req.json

Submit request using file:
	deleteconfiguration -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | deleteconfiguration --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v DeleteConfigurationRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.DeleteConfiguration(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeDeleteConfigurationClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeDeleteConfigurationClientCommand.Flags())
}

var _RuntimeSubscribeConfigurationClientCommand = &cobra.Command{
	Use:  "subscribeconfiguration",
	Long: "SubscribeConfiguration client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	subscribeconfiguration -p > req.json

Submit request using file:
	subscribeconfiguration -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | subscribeconfiguration --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v SubscribeConfigurationRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			stream, err := cli.SubscribeConfiguration(context.Background())
			if err != nil {
				return err
			}
			for {
				err = in.Decode(&v)
				if err == io.EOF {
					stream.CloseSend()
					break
				}
				if err != nil {
					return err
				}
				err = stream.Send(&v)
				if err != nil {
					return err
				}
			}

			for {
				v, err := stream.Recv()
				if err == io.EOF {
					break
				}
				if err != nil {
					return err
				}
				err = out.Encode(v)
				if err != nil {
					return err
				}
			}
			return nil

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeSubscribeConfigurationClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeSubscribeConfigurationClientCommand.Flags())
}

var _RuntimeTryLockClientCommand = &cobra.Command{
	Use:  "trylock",
	Long: "TryLock client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	trylock -p > req.json

Submit request using file:
	trylock -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | trylock --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v TryLockRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.TryLock(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeTryLockClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeTryLockClientCommand.Flags())
}

var _RuntimeUnlockClientCommand = &cobra.Command{
	Use:  "unlock",
	Long: "Unlock client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	unlock -p > req.json

Submit request using file:
	unlock -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | unlock --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v UnlockRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.Unlock(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeUnlockClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeUnlockClientCommand.Flags())
}

var _RuntimeLockKeepAliveClientCommand = &cobra.Command{
	Use:  "lockkeepalive",
	Long: "LockKeepAlive client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	lockkeepalive -p > req.json

Submit request using file:
	lockkeepalive -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | lockkeepalive --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v LockKeepAliveRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.LockKeepAlive(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeLockKeepAliveClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeLockKeepAliveClientCommand.Flags())
}

var _RuntimeGetNextIdClientCommand = &cobra.Command{
	Use:  "getnextid",
	Long: "GetNextId client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getnextid -p > req.json

Submit request using file:
	getnextid -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getnextid --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetNextIdRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.GetNextId(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetNextIdClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetNextIdClientCommand.Flags())
}

var _RuntimeGetStateClientCommand = &cobra.Command{
	Use:  "getstate",
	Long: "GetState client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getstate -p > req.json

Submit request using file:
	getstate -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getstate --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetStateRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.GetState(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetStateClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetStateClientCommand.Flags())
}

var _RuntimeGetBulkStateClientCommand = &cobra.Command{
	Use:  "getbulkstate",
	Long: "GetBulkState client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getbulkstate -p > req.json

Submit request using file:
	getbulkstate -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getbulkstate --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetBulkStateRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.GetBulkState(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetBulkStateClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetBulkStateClientCommand.Flags())
}

var _RuntimeSaveStateClientCommand = &cobra.Command{
	Use:  "savestate",
	Long: "SaveState client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	savestate -p > req.json

Submit request using file:
	savestate -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | savestate --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v SaveStateRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.SaveState(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeSaveStateClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeSaveStateClientCommand.Flags())
}

var _RuntimeDeleteStateClientCommand = &cobra.Command{
	Use:  "deletestate",
	Long: "DeleteState client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	deletestate -p > req.json

Submit request using file:
	deletestate -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | deletestate --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v DeleteStateRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.DeleteState(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeDeleteStateClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeDeleteStateClientCommand.Flags())
}

var _RuntimeDeleteBulkStateClientCommand = &cobra.Command{
	Use:  "deletebulkstate",
	Long: "DeleteBulkState client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	deletebulkstate -p > req.json

Submit request using file:
	deletebulkstate -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | deletebulkstate --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v DeleteBulkStateRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.DeleteBulkState(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeDeleteBulkStateClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeDeleteBulkStateClientCommand.Flags())
}

var _RuntimeExecuteStateTransactionClientCommand = &cobra.Command{
	Use:  "executestatetransaction",
	Long: "ExecuteStateTransaction client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	executestatetransaction -p > req.json

Submit request using file:
	executestatetransaction -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | executestatetransaction --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v ExecuteStateTransactionRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.ExecuteStateTransaction(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeExecuteStateTransactionClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeExecuteStateTransactionClientCommand.Flags())
}

var _RuntimePublishEventClientCommand = &cobra.Command{
	Use:  "publishevent",
	Long: "PublishEvent client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	publishevent -p > req.json

Submit request using file:
	publishevent -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | publishevent --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v PublishEventRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.PublishEvent(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimePublishEventClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimePublishEventClientCommand.Flags())
}

var _RuntimeGetFileClientCommand = &cobra.Command{
	Use:  "getfile",
	Long: "GetFile client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getfile -p > req.json

Submit request using file:
	getfile -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getfile --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetFileRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			stream, err := cli.GetFile(context.Background(), &v)

			if err != nil {
				return err
			}

			for {
				v, err := stream.Recv()
				if err == io.EOF {
					break
				}
				if err != nil {
					return err
				}
				err = out.Encode(v)
				if err != nil {
					return err
				}
			}
			return nil

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetFileClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetFileClientCommand.Flags())
}

var _RuntimePutFileClientCommand = &cobra.Command{
	Use:  "putfile",
	Long: "PutFile client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	putfile -p > req.json

Submit request using file:
	putfile -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | putfile --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v PutFileRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			stream, err := cli.PutFile(context.Background())
			if err != nil {
				return err
			}
			for {
				err = in.Decode(&v)
				if err == io.EOF {
					stream.CloseSend()
					break
				}
				if err != nil {
					return err
				}
				err = stream.Send(&v)
				if err != nil {
					return err
				}
			}

			resp, err := stream.CloseAndRecv()
			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimePutFileClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimePutFileClientCommand.Flags())
}

var _RuntimeListFileClientCommand = &cobra.Command{
	Use:  "listfile",
	Long: "ListFile client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	listfile -p > req.json

Submit request using file:
	listfile -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | listfile --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v ListFileRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.ListFile(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeListFileClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeListFileClientCommand.Flags())
}

var _RuntimeDelFileClientCommand = &cobra.Command{
	Use:  "delfile",
	Long: "DelFile client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	delfile -p > req.json

Submit request using file:
	delfile -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | delfile --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v DelFileRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.DelFile(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeDelFileClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeDelFileClientCommand.Flags())
}

var _RuntimeGetFileMetaClientCommand = &cobra.Command{
	Use:  "getfilemeta",
	Long: "GetFileMeta client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getfilemeta -p > req.json

Submit request using file:
	getfilemeta -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getfilemeta --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetFileMetaRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.GetFileMeta(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetFileMetaClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetFileMetaClientCommand.Flags())
}

var _RuntimeInvokeBindingClientCommand = &cobra.Command{
	Use:  "invokebinding",
	Long: "InvokeBinding client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	invokebinding -p > req.json

Submit request using file:
	invokebinding -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | invokebinding --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v InvokeBindingRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.InvokeBinding(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeInvokeBindingClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeInvokeBindingClientCommand.Flags())
}

var _RuntimeGetSecretClientCommand = &cobra.Command{
	Use:  "getsecret",
	Long: "GetSecret client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getsecret -p > req.json

Submit request using file:
	getsecret -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getsecret --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetSecretRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.GetSecret(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetSecretClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetSecretClientCommand.Flags())
}

var _RuntimeGetBulkSecretClientCommand = &cobra.Command{
	Use:  "getbulksecret",
	Long: "GetBulkSecret client\n\nYou can use environment variables with the same name of the command flags.\nAll caps and s/-/_, e.g. SERVER_ADDR.",
	Example: `
Save a sample request to a file (or refer to your protobuf descriptor to create one):
	getbulksecret -p > req.json

Submit request using file:
	getbulksecret -f req.json

Authenticate using the Authorization header (requires transport security):
	export AUTH_TOKEN=your_access_token
	export SERVER_ADDR=api.example.com:443
	echo '{json}' | getbulksecret --tls`,
	Run: func(cmd *cobra.Command, args []string) {
		var v GetBulkSecretRequest
		err := _RuntimeRoundTrip(v, func(cli RuntimeClient, in iocodec.Decoder, out iocodec.Encoder) error {

			err := in.Decode(&v)
			if err != nil {
				return err
			}

			resp, err := cli.GetBulkSecret(context.Background(), &v)

			if err != nil {
				return err
			}

			return out.Encode(resp)

		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	RuntimeClientCommand.AddCommand(_RuntimeGetBulkSecretClientCommand)
	_DefaultRuntimeClientCommandConfig.AddFlags(_RuntimeGetBulkSecretClientCommand.Flags())
}
